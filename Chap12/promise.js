'use strict';

// Promise: ÎπÑÎèôÍ∏∞Ï†ÅÏù∏ ÏàòÌñâÏùÑ Ìï† Îïå Ïù¥Ïö©
// State: pending -> fulfilled or rejected



// 1. Producer
// ÏÉàÎ°úÏö¥ ÌîÑÎ°úÎØ∏Ïä§Í∞Ä ÎßåÎì§Ïñ¥Ïßà Îïå executorÎùºÎäî Ìï®ÏàòÍ∞Ä ÏûêÎèôÏ†ÅÏúºÎ°ú Î∞îÎ°ú Ïã§Ìñâ
const promise = new Promise((resolve, reject) => {
    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜµÏã†, ÌååÏùº ÏùΩÏñ¥Ïò§Í∏∞ Îì±ÏùÄ ÎπÑÎèôÍ∏∞Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏùå
    console.log('doing something...');
    setTimeout(() => {
      resolve('ellie');
      // reject(new Error('no network'));
    }, 2000);
  });
  


  // 2. Consumers: then, catch, finally
  promise 
    .then(value => { 
      console.log(value);
    })
    .catch(error => { // ÏóêÎü¨ Î∞úÏÉù ÏãúÏùò Ï≤òÎ¶¨
      console.log(error);
    })
    .finally(() => { // Î¨¥Ï°∞Í±¥ Ïã§Ìñâ
      console.log('finally');
    });
  


  // 3. Promise chaining
  const fetchNumber = new Promise((resolve, reject) => {
    setTimeout(() => resolve(1), 1000);
  });
  
  fetchNumber
    .then(num => num * 2) // 2
    .then(num => num * 3) // 6
    .then(num => {
      return new Promise((resolve, reject) => {
        setTimeout(() => resolve(num - 1), 1000);
      });
    })
    .then(num => console.log(num)); // 5
  


  // 4. Error Handling
  const getHen = () =>
    new Promise((resolve, reject) => {
      setTimeout(() => resolve('üêì'), 1000);
    });
  const getEgg = hen =>
    new Promise((resolve, reject) => {
      setTimeout(() => reject(new Error(`error! ${hen} => ü•ö`)), 1000);
    });
  const cook = egg =>
    new Promise((resolve, reject) => {
      setTimeout(() => resolve(`${egg} => üç≥`), 1000);
    });
  
  getHen() //
    .then(getEgg)
    .catch(error => {
        return '‚≠ê';
    })
    .then(cook)
    .then(console.log)
    .catch(console.log);